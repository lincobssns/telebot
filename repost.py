import asyncio
import os
import random
import logging
import base64
from telethon import TelegramClient, errors
from datetime import datetime, timedelta
import pytz
from flask import Flask
from threading import Thread
import warnings

# Suprime warnings do Flask
warnings.filterwarnings("ignore", category=UserWarning)

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Servidor de Health Check
app = Flask(__name__)

@app.route('/')
def health_check():
    return 'OK', 200

@app.route('/health')
def health():
    return 'OK', 200

def run_health_server():
    """Executa o servidor de health check em porta separada"""
    port = int(os.getenv('PORT', 8000))
    logger.info(f"ü©∫ Servidor de health check iniciado na porta {port}")
    app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)

class SessionManager:
    @staticmethod
    def load_session():
        """Carrega a sess√£o do environment"""
        session_data = os.getenv('SESSION_DATA')
        if session_data:
            try:
                decoded = base64.b64decode(session_data)
                with open('koyeb_session.session', 'wb') as f:
                    f.write(decoded)
                logger.info("‚úÖ Sess√£o carregada do environment")
                return True
            except Exception as e:
                logger.error(f"‚ùå Erro ao carregar sess√£o: {e}")
        return False

class TelegramRepostBot:
    def __init__(self):
        # Carrega sess√£o primeiro
        SessionManager.load_session()
        
        self.api_id = 26949670
        self.api_hash = 'fcb4ebdda2cc008abb37ad9fd9ce3c3a'
        self.phone = '+5511960188559'
        self.password = 'Isadora44'
        
        self.donor_channel = -1003106957508  # Canal de origem
        self.target_channel = -1003135697010  # Canal de destino
        
        self.min_interval = 1800  # 30 minutos
        self.max_interval = 7200  # 2 horas
        self.timezone = pytz.timezone('America/Sao_Paulo')
        
        self.client = TelegramClient('koyeb_session', self.api_id, self.api_hash)
        self.sent_messages = set()

    async def connect(self):
        """Conecta usando sess√£o existente"""
        try:
            await self.client.connect()
            
            if not await self.client.is_user_authorized():
                logger.error("‚ùå Sess√£o inv√°lida ou expirada")
                return False
                
            logger.info("‚úÖ Conectado com sess√£o existente!")
            me = await self.client.get_me()
            logger.info(f"üë§ Logado como: {me.first_name}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro de conex√£o: {e}")
            return False

    def is_media_message(self, message):
        """Verifica se a mensagem cont√©m m√≠dia"""
        if not message:
            return False
        
        # Verifica se tem m√≠dia
        if hasattr(message, 'media') and message.media:
            return True
        
        # Verifica tipos espec√≠ficos de m√≠dia
        if (hasattr(message, 'photo') and message.photo or
            hasattr(message, 'video') and message.video or
            hasattr(message, 'document') and message.document or
            hasattr(message, 'sticker') and message.sticker):
            return True
            
        return False

    async def get_available_media_messages(self):
        """Coleta apenas mensagens com m√≠dia"""
        try:
            logger.info(f"üîç Coletando M√çDIAS do canal {self.donor_channel}")
            media_messages = []
            
            async for message in self.client.iter_messages(self.donor_channel, limit=200):
                if message and self.is_media_message(message):
                    msg_id = f"{message.id}_{self.donor_channel}"
                    if msg_id not in self.sent_messages:
                        media_messages.append((message, msg_id))
            
            logger.info(f"üéØ {len(media_messages)} m√≠dias dispon√≠veis")
            return media_messages
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao coletar m√≠dias: {e}")
            return []

    async def download_and_send_media(self, message):
        """Baixa e reenvia a m√≠dia (sem forward)"""
        try:
            # Baixa a m√≠dia
            file_path = await message.download_media()
            
            if not file_path:
                logger.error("‚ùå N√£o foi poss√≠vel baixar a m√≠dia")
                return False
            
            # Envia a m√≠dia como nova mensagem
            if message.photo:
                # √â uma foto
                await self.client.send_file(
                    self.target_channel,
                    file_path,
                    caption=""
                )
            elif message.video:
                # √â um v√≠deo
                await self.client.send_file(
                    self.target_channel,
                    file_path,
                    caption="",
                    supports_streaming=True
                )
            elif message.document:
                # √â um documento
                await self.client.send_file(
                    self.target_channel,
                    file_path,
                    caption=""
                )
            elif message.sticker:
                # √â um sticker
                await self.client.send_file(
                    self.target_channel,
                    file_path,
                    caption=""
                )
            else:
                # Outro tipo de m√≠dia
                await self.client.send_file(
                    self.target_channel,
                    file_path,
                    caption=""
                )
            
            # Limpa o arquivo baixado
            if os.path.exists(file_path):
                os.remove(file_path)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar m√≠dia: {e}")
            # Limpa o arquivo em caso de erro
            if 'file_path' in locals() and os.path.exists(file_path):
                os.remove(file_path)
            return False

    async def send_random_media(self):
        """Envia uma m√≠dia aleat√≥ria (sem forward)"""
        available_media = await self.get_available_media_messages()
        
        if not available_media:
            logger.info("üîÑ Todas as m√≠dias enviadas! Reiniciando ciclo...")
            self.sent_messages.clear()
            available_media = await self.get_available_media_messages()
            
            if not available_media:
                logger.warning("üì≠ Nenhuma m√≠dia dispon√≠vel")
                return False

        # Seleciona m√≠dia aleat√≥ria
        message, msg_id = random.choice(available_media)
        
        try:
            logger.info(f"üì§ Enviando m√≠dia ID {message.id} (sem forward)...")
            
            # Envia a m√≠dia como nova mensagem (n√£o encaminha)
            success = await self.download_and_send_media(message)
            
            if success:
                self.sent_messages.add(msg_id)
                logger.info(f"‚úÖ M√≠dia enviada como nova mensagem!")
                logger.info(f"   üìä Total enviadas: {len(self.sent_messages)}")
                return True
            else:
                return False
            
        except errors.FloodWaitError as e:
            logger.warning(f"‚è≥ Flood wait: {e.seconds}s")
            await asyncio.sleep(e.seconds)
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar m√≠dia: {e}")
            return False

    async def run(self):
        """Loop principal - m√≠dias como novas mensagens"""
        logger.info("üöÄ Iniciando Bot - Apenas M√≠dias (Sem Forward)")
        
        if not await self.connect():
            logger.error("‚ùå Falha na conex√£o")
            return

        logger.info("üéØ Bot rodando! M√≠dias ser√£o enviadas como novas mensagens")
        
        while True:
            try:
                # Envia uma m√≠dia
                success = await self.send_random_media()
                
                # Calcula pr√≥ximo intervalo
                wait_time = random.randint(self.min_interval, self.max_interval)
                next_time = datetime.now(self.timezone) + timedelta(seconds=wait_time)
                
                if success:
                    logger.info(f"‚è∞ Pr√≥xima m√≠dia em {wait_time//60}min ({next_time.strftime('%H:%M')})")
                else:
                    logger.warning(f"üîÑ Tentativa em {wait_time//60}min")
                
                await asyncio.sleep(wait_time)
                
            except Exception as e:
                logger.error(f"üí• Erro: {e}")
                await asyncio.sleep(300)

async def main():
    # Inicia o servidor de health check em thread separada
    health_thread = Thread(target=run_health_server, daemon=True)
    health_thread.start()
    
    # Aguarda um pouco para o servidor iniciar
    await asyncio.sleep(2)
    
    # Inicia o bot
    bot = TelegramRepostBot()
    await bot.run()

if __name__ == "__main__":
    asyncio.run(main())
